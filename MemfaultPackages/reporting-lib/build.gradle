apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode loadVersionCode() as Integer
        versionName loadVersionName() as String

        // Used by BuildConfigSdkVersionInfo:
        buildConfigField "String", "APP_VERSION_NAME", "\"${loadVersionName()}\""
        buildConfigField "int", "APP_VERSION_CODE", "${loadVersionCode()}"
        buildConfigField "String", "UPSTREAM_VERSION_NAME", "\"${upstreamVersionName()}\""
        buildConfigField "int", "UPSTREAM_VERSION_CODE", "${upstreamVersionCode()}"
        buildConfigField "String", "UPSTREAM_GIT_SHA", "\"${upstreamGitSha()}\""
        buildConfigField "String", "CURRENT_GIT_SHA", "\"${currentGitSha()}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        releaseTest {
            initWith release
        }
    }

    sourceSets {
        main {
            aidl.srcDirs += '../../MemfaultStructuredLogd/aidl'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

dependencies {
    implementation deps.serialization.json
    testImplementation deps.test.junitApi
    testImplementation deps.test.junitJupiterEngine
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifact androidSourcesJar

                groupId = 'com.memfault.bort'
                artifactId = 'reporting-lib'
                version = 1.0

                pom {
                    name = 'Bort Reporting'
                    description = 'Metric and event reporting for Memfault Bort SDK'
                    url = 'https://github.com/memfault/bort'
                    licenses {
                        license {
                            name = 'Memfault SDK License'
                            url = 'https://github.com/memfault/bort/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'memfault'
                            name = 'Memfault, Inc.'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/memfault/bort.git'
                        url = 'https://github.com/memfault/bort'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username getRepositoryUsername()
                    password getRepositoryPassword()
                }
            }
        }
    }

    signing {
        sign publishing.publications.release
    }
}
