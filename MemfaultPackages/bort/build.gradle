import static com.memfault.bort.buildsrc.BortSettingsDownloaderKt.getBortSettingsAssetsPath

apply plugin: 'com.android.application'
apply plugin: 'com.squareup.anvil'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply from: "../properties.gradle"

def keystoreProperties = loadBortKeystoreProperties()
def keystoreFilePath = getKeystoreFilePath()
def generatedSettingsAssets = getBortSettingsAssetsPath(project.rootProject.rootDir)

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        applicationId bortProperty("BORT_APPLICATION_ID")
        manifestPlaceholders = [
                bortControlPermission: bortProperty("BORT_CONTROL_PERMISSION"),
                bortFeatureName: getBortFeatureName()
        ]
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode loadVersionCode() as Integer
        versionName loadVersionName() as String

        buildConfigField "String", "MEMFAULT_PROJECT_API_KEY", "\"" + bortProperty("MEMFAULT_PROJECT_API_KEY") + "\""
        buildConfigField "Boolean", "RUNTIME_ENABLE_REQUIRED", bortProperty("RUNTIME_ENABLE_REQUIRED")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreFilePath)
            storePassword keystoreProperties['storePassword']
            v1SigningEnabled bortProperty("V1_SIGNING_ENABLED") as Boolean
            v2SigningEnabled bortProperty("V2_SIGNING_ENABLED") as Boolean
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        // Used for CI. Do not use for production.
        releaseTest {
            initWith release
        }
    }

    variantFilter { variant ->
        if (variant.buildType.name.endsWith('debug')) {
            variant.setIgnore(true);
        }
    }

    lintOptions {
        abortOnError true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        freeCompilerArgs += "-Xopt-in=kotlin.time.ExperimentalTime"
        freeCompilerArgs += "-Xjvm-default=all"
    }

    sourceSets {
        main {
            aidl.srcDirs = ['../../MemfaultDumpster/']
            assets.srcDirs += [generatedSettingsAssets]
        }
    }

    testOptions {
        // Needed to unit test against AIDL-generated code
        unitTests.returnDefaultValues = true
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

kapt {
    correctErrorTypes true
    arguments {
        // This is necessary because of the way we bind Anvil's component to Hilt's.
        arg("dagger.hilt.disableModulesHaveInstallInCheck", "true")
    }
}

dependencies {
    implementation project(':bort-shared')
    implementation project(':reporting-lib')

    implementation deps.kotlin.stdlib
    implementation deps.kotlin.coroutines

    implementation deps.android.work
    implementation deps.android.preference

    implementation deps.serialization.json
    implementation deps.serialization.converter

    implementation deps.result
    implementation deps.retrofit
    implementation deps.okhttp
    implementation deps.okio

    implementation deps.room.runtime
    kapt deps.room.compiler
    implementation deps.room.ktx

    implementation deps.jblake2

    implementation deps.dagger.hilt
    kapt deps.dagger.hiltCompiler

    testImplementation deps.test.junitApi
    testRuntimeOnly deps.test.junitJupiterEngine
    testRuntimeOnly deps.test.junitVintageEngine
    testImplementation deps.test.coroutines
    // Required for unit tests to access JSONObject
    testImplementation deps.test.json
    testImplementation deps.test.mockk
    testImplementation deps.test.mockWebServer
    testImplementation deps.test.robolectric
    testImplementation deps.test.testCore
}

task copyReleaseApk(type: Copy) {
    from file("$buildDir/outputs/apk/release/bort-release.apk")
    into rootDir
    rename 'bort-release.apk', 'MemfaultBort.apk'
}

import java.nio.file.Paths

task exportPem(type: Exec) {
    commandLine 'keytool',
            '-export',
            '-rfc',
            '-keystore', keystoreFilePath,
            '-alias', keystoreProperties['keyAlias'],
            '-file', Paths.get(rootDir.toString(), "MemfaultBort.x509.pem"),
            '-storepass', keystoreProperties['storePassword']
}


afterEvaluate {
    assembleRelease.finalizedBy copyReleaseApk, exportPem
    assembleReleaseTest.finalizedBy exportPem
}
