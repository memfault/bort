import static com.memfault.bort.buildsrc.BortSettingsDownloaderKt.getBortSettingsAssetsPath

apply plugin: 'com.android.library'
apply plugin: 'com.squareup.anvil'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply from: rootProject.file("properties.gradle")
apply plugin: 'common-android'

def generatedSettingsAssets = getBortSettingsAssetsPath(project.rootProject.rootDir)

android {
    buildFeatures {
        buildConfig = true
        aidl = true
    }

    defaultConfig {
      // Used by BuildConfigSdkVersionInfo:
        buildConfigField "String", "APP_VERSION_NAME", "\"${loadVersionName()}\""
        buildConfigField "int", "APP_VERSION_CODE", "${loadVersionCode()}"
        buildConfigField "String", "UPSTREAM_VERSION_NAME", "\"${upstreamVersionName()}\""
        buildConfigField "int", "UPSTREAM_VERSION_CODE", "${upstreamVersionCode()}"
        buildConfigField "String", "UPSTREAM_GIT_SHA", "\"${upstreamGitSha()}\""
        buildConfigField "String", "CURRENT_GIT_SHA", "\"${currentGitSha()}\""
        buildConfigField "String", "BORT_APPLICATION_ID", "\"" + bortProperty("BORT_APPLICATION_ID") + "\""
        buildConfigField "String", "BORT_OTA_APPLICATION_ID", "\"" + bortProperty("BORT_OTA_APPLICATION_ID") + "\""
        buildConfigField "int", "CLIENT_SERVER_PORT", bortProperty("CLIENT_SERVER_PORT")
        buildConfigField "String", "CLIENT_SERVER_HOST", "\"" + bortProperty("CLIENT_SERVER_HOST") + "\""
        buildConfigField "Boolean", "OTA_AUTO_INSTALL", bortProperty("OTA_AUTO_INSTALL")
        buildConfigField "Boolean", "ALLOW_PROJECT_KEY_CHANGE", bortProperty("ALLOW_PROJECT_KEY_CHANGE")
        buildConfigField "String", "MEMFAULT_PROJECT_API_KEY", "\"" + bortProperty("MEMFAULT_PROJECT_API_KEY") + "\""
        buildConfigField "String", "PROJECT_KEY_SYSPROP", "\"" + bortProperty("PROJECT_KEY_SYSPROP") + "\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    sourceSets {
        main {
            aidl.srcDirs = ['../../MemfaultDumpster/']
            assets.srcDirs += [generatedSettingsAssets]
        }
    }

    namespace 'com.memfault.bort.shared'
}

kapt {
    correctErrorTypes true
    arguments {
        // This is necessary because of the way we bind Anvil's component to Hilt's.
        arg("dagger.hilt.disableModulesHaveInstallInCheck", "true")
    }
}

dependencies {
    api project(':reporting-libs:reporting-lib-common')
    api project(':reporting-libs:reporting-lib-kotlin')

    implementation deps.android.preference
    implementation deps.android.work
    implementation deps.dagger.hilt
    implementation deps.jblake2
    implementation deps.okhttp
    implementation deps.result
    implementation deps.serialization.json
    implementation deps.serialization.converter
    // An explicit reference to this transitive dependency fixes a duplicate class error during build.
    implementation deps.android.viewmodel

    kapt deps.dagger.hilt.compiler

    testImplementation deps.test.parameter.injector
}
