import static com.memfault.bort.buildsrc.BortSettingsDownloaderKt.getBortSettingsAssetsPath

apply plugin: 'com.android.library'
apply plugin: 'com.squareup.anvil'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'
apply from: "../properties.gradle"

def generatedSettingsAssets = getBortSettingsAssetsPath(project.rootProject.rootDir)

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode loadVersionCode() as Integer
        versionName loadVersionName() as String

        // Used by BuildConfigSdkVersionInfo:
        buildConfigField "String", "APP_VERSION_NAME", "\"${loadVersionName()}\""
        buildConfigField "int", "APP_VERSION_CODE", "${loadVersionCode()}"
        buildConfigField "String", "UPSTREAM_VERSION_NAME", "\"${upstreamVersionName()}\""
        buildConfigField "int", "UPSTREAM_VERSION_CODE", "${upstreamVersionCode()}"
        buildConfigField "String", "UPSTREAM_GIT_SHA", "\"${upstreamGitSha()}\""
        buildConfigField "String", "CURRENT_GIT_SHA", "\"${currentGitSha()}\""
        buildConfigField "String", "BORT_APPLICATION_ID", "\"" + bortProperty("BORT_APPLICATION_ID") + "\""
        buildConfigField "String", "BORT_OTA_APPLICATION_ID", "\"" + bortProperty("BORT_OTA_APPLICATION_ID") + "\""
        buildConfigField "int", "CLIENT_SERVER_PORT", bortProperty("CLIENT_SERVER_PORT")
        buildConfigField "String", "CLIENT_SERVER_HOST", "\"" + bortProperty("CLIENT_SERVER_HOST") + "\""
        buildConfigField "Boolean", "OTA_AUTO_INSTALL", bortProperty("OTA_AUTO_INSTALL")
        buildConfigField "String", "MEMFAULT_PROJECT_API_KEY", "\"" + bortProperty("MEMFAULT_PROJECT_API_KEY") + "\""
        buildConfigField "Boolean", "OTA_ALLOW_METERED", bortProperty("OTA_ALLOW_METERED")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        // Used for CI. Do not use for production.
        releaseTest {
            initWith release
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        freeCompilerArgs += "-Xopt-in=kotlin.time.ExperimentalTime"
    }

    sourceSets {
        main {
            aidl.srcDirs = ['../../MemfaultDumpster/']
            assets.srcDirs += [generatedSettingsAssets]
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

dependencies {
    implementation project(':reporting-lib')

    implementation deps.android.work
    implementation deps.dagger.hilt
    implementation deps.jblake2
    implementation deps.kotlin.stdlib
    implementation deps.kotlin.coroutines
    implementation deps.kotlin.coroutinesAndroid
    implementation deps.okhttp
    implementation deps.result
    implementation deps.serialization.json
    implementation deps.serialization.converter

    testImplementation deps.test.junitApi
    testImplementation deps.test.junitJupiterEngine
    testImplementation deps.test.coroutines
    testImplementation deps.test.mockk
}
