import sys
import pytest
import os

sys.path.append(os.path.dirname(__file__))

from bort_src_gen import (
    _check_signatures,
    _get_apksigner_jar_path,
    _parse_apksigner_cert_sha256,
    _parse_keytool_printcert_sha256,
    _replace_placeholders,
    Replacement,
    _generate_cpp_header,
    _get_replacements,
    JavaProperties,
)


def test_replace_placeholders():
    assert (
        _replace_placeholders(
            '<permission name="$PERM"/>', {"$PERM": Replacement("BORT_PERM", "com.myperm")}
        )
        == '<permission name="com.myperm"/>'
    )


def test_generate_cpp_header():
    assert (
        _generate_cpp_header({
            "$PERM": Replacement("BORT_PERM", "com.myperm"),
            "$APP_ID": Replacement("BORT_ID", "com.app"),
        })
        == """// DO NOT EDIT -- GENERATED BY bort_src_gen.py
#define APP_ID com.app
#define PERM com.myperm
"""
    )


def test_get_replacements(monkeypatch):
    assert _get_replacements(
        {"REPL": ("VAR1", "VAR2")}, JavaProperties.from_string("VAR2=FOO")
    ) == {"REPL": Replacement("VAR2", "FOO")}

    with pytest.raises(
        Exception,
        match="Missing value for REPL. Please define VAR1 or VAR2 in bort.properties!",
    ):
        assert _get_replacements({"REPL": ("VAR1", "VAR2")}, JavaProperties.from_string("VAR3=FOO"))

    with pytest.raises(
        Exception,
        match="Invalid value 'vnd.myandroid.bortappid' for 'VAR1'. Please change in bort.properties!",
    ):
        assert _get_replacements(
            {"REPL": ("VAR1", "VAR2")}, JavaProperties.from_string("VAR1=vnd.myandroid.bortappid")
        )

    with pytest.raises(
        Exception,
        match="Invalid value 'vnd.myandroid.bort.otaappid' for 'VAR1'. Please change in bort.properties!",
    ):
        monkeypatch.setenv("TARGET_USES_MFLT_OTA", "1")
        assert _get_replacements(
            {"REPL": ("VAR1", "VAR2")},
            JavaProperties.from_string("VAR1=vnd.myandroid.bort.otaappid"),
        )

    monkeypatch.setenv("TARGET_USES_MFLT_OTA", "0")
    assert _get_replacements(
        {"REPL": ("VAR1", "VAR2")}, JavaProperties.from_string("VAR1=vnd.myandroid.bort.otaappid")
    ) == {"REPL": Replacement("VAR1", "vnd.myandroid.bort.otaappid")}


def test_java_properties():
    props = JavaProperties.from_string(
        """
#  comment
  # comment
! comment
FOO=BAR
BAZ=DUN\
NO
"""
    )
    assert props.get("FOO") == "BAR"
    assert props.get("BAZ") == "DUNNO"


def test_parse_keytool_printcert_sha256() -> None:
    import textwrap

    output = textwrap.dedent(
        """\
        Owner: CN=Memfault Inc, OU=Memfault, O=Memfault, L=San Francisco, ST=CA, C=US
        SHA256: foo bar
        Certificate fingerprints:
        \t SHA256: 17:47:DC:46:55:D9:72:9E:5B:3A:A9:33:8D:52:53:85:95:A3:56:AA:80:61:86:5C:14:8F:BB:00:DF:FB:4B:4C
        Version: 3
        """
    )
    assert (
        _parse_keytool_printcert_sha256(output, [])
        == "17:47:DC:46:55:D9:72:9E:5B:3A:A9:33:8D:52:53:85:95:A3:56:AA:80:61:86:5C:14:8F:BB:00:DF:FB:4B:4C"
    )


def test_parse_keytool_printcert_sha256_failure() -> None:
    with pytest.raises(Exception, match="Failed to extract SHA256 fingerprint") as excinfo:
        _parse_keytool_printcert_sha256("the output", ["keytool", "cmd", "xyz"])
    assert "keytool cmd xyz" in str(excinfo.value)
    assert "the output" in str(excinfo.value)


def test_parse_apksigner_cert_sha256() -> None:
    import textwrap

    output = textwrap.dedent(
        """\
        Signer #1 certificate DN: CN=Memfault Inc, OU=Memfault, O=Memfault, L=San Francisco, ST=CA, C=US
        Signer #1 certificate SHA-256 digest: 1747dc4655d9729e5b3aa9338d52538595a356aa8061865c148fbb00dffb4b4c
        Signer #2 certificate SHA-256 digest: aa47dc4655d9729e5b3aa9338d52538595a356aa8061865c148fbb00dffb4b4c
        """
    )
    assert _parse_apksigner_cert_sha256(output) == [
        "17:47:DC:46:55:D9:72:9E:5B:3A:A9:33:8D:52:53:85:95:A3:56:AA:80:61:86:5C:14:8F:BB:00:DF:FB:4B:4C",
        "AA:47:DC:46:55:D9:72:9E:5B:3A:A9:33:8D:52:53:85:95:A3:56:AA:80:61:86:5C:14:8F:BB:00:DF:FB:4B:4C",
    ]


def test_check_signatures_mismatch(tmp_path):
    output_file = tmp_path / "signatures.out"

    with pytest.raises(Exception, match="signature does not match"):
        _check_signatures(
            output_file=str(output_file),
            apk_file="app.apk",
            pem_file="cert.pem",
            apk_cert_sha256s=["AA:BB", "EE:FF"],
            pem_sha256="CC:DD",
        )


def test_check_signatures_match(tmp_path):
    output_file = tmp_path / "signatures.out"

    _check_signatures(
        output_file=str(output_file),
        apk_file="app.apk",
        pem_file="cert.pem",
        apk_cert_sha256s=["AA:BB", "CC:DD"],
        pem_sha256="CC:DD",
    )

    assert output_file.read_text() == "OK: CC:DD"


def test_apksigner_jar_path_exists():
    assert os.path.exists(_get_apksigner_jar_path())
