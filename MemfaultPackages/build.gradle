// Top-level build file where you can add configuration options common to all sub-projects/modules.

import static com.memfault.bort.buildsrc.BortSettingsDownloaderKt.fetchBortSettings

// Try to refresh settings/settings.json before configuring the :bort project:
gradle.beforeProject { project ->
    if (project.path != ":bort") return

    fetchBortSettings(
            rootProject.rootDir,
            rootProject.properties["MEMFAULT_API_BASE_URL"],
            bortProperty("MEMFAULT_PROJECT_API_KEY"),
            rootProject.properties["BORT_USE_DEVELOPMENT_SETTINGS_JSON"] == "1",
            rootProject.properties["SKIP_DOWNLOAD_SYSTEM_SETTINGS_JSON"] == "1",
            { name -> bortProperty(name) },
            { msg, exc -> rootProject.logger.log(LogLevel.WARN, msg,
                    exc == null ? "" : exc) }
    )
}

buildscript {
    apply from: 'properties.gradle'

    gradle.taskGraph.whenReady { graph ->
        verifyBortProperties()
        warnLegacyBortProperties()
    }

    ext.versions = [
            'androidx'   : [
                    'activityKtx'                      : '1.4.0',
                    'appcompat'                        : '1.3.1',
                    'fragmentKtx'                      : '1.3.6',
                    'preference'                       : '1.1.1',
                    'work'                             : '2.7.0',
                    'room'                             : '2.3.0',
            ],
            'android'   : [
                    'androidGradlePlugin'              : '7.0.2',
                    'material'                         : '1.4.0',
            ],
            'kotlin'   : [
                    'kotlin'                           : '1.5.31',
                    'kotlinCoroutines'                 : '1.5.2',
                    'retrofitKtxSerializationConverter': '0.8.0',
                    'ktxSerializationJson'             : '1.3.0',
                    'ktlintGradle'                     : '10.2.0',
            ],
            'minSdk'                           : bortProperty("MIN_SDK_VERSION") as Integer,
            'targetSdk'                        : bortProperty("TARGET_SDK_VERSION") as Integer,
            'compileSdk'                       : bortProperty("COMPILE_SDK_VERSION") as Integer,
            'test'     : [
                    'coroutinesTest'                   : '1.5.2',
                    'androidxCoreTest'                 : '1.4.0',
                    'junit'                            : '5.8.1',
                    'json'                             : '20210307',
                    'mockk'                            : '1.12.0',
                    'robolectric'                      : '4.5.1',
            ],
            'jblake2'                          : '0.4',
            'memfaultCloud'                    : '2.0.3',
            'okhttp'                           : '4.9.2',
            'okio'                             : '3.0.0',
            'result'                           : '1.1.9',
            'retrofit'                         : '2.9.0',
            'jackson'                          : '2.13.0',
            'zjsonpatch'                       : '0.4.11',
    ]
    ext.deps = [
            'android'      : [
                    'activityKtx'     : "androidx.activity:activity-ktx:${versions.androidx.activityKtx}",
                    'appcompat'       : "androidx.appcompat:appcompat:${versions.androidx.appcompat}",
                    'fragmentKtx'     : "androidx.fragment:fragment-ktx:${versions.androidx.fragmentKtx}",
                    'gradlePlugin'    : "com.android.tools.build:gradle:${versions.android.androidGradlePlugin}",
                    'material'        : "com.google.android.material:material:${versions.android.material}",
                    'preference'      : "androidx.preference:preference:${versions.androidx.preference}",
                    'work'            : "androidx.work:work-runtime-ktx:${versions.androidx.work}",
            ],
            'kotlin'       : [
                    'ktlintGradle'      : "org.jlleitschuh.gradle:ktlint-gradle:${versions.kotlin.ktlintGradle}",
                    'gradlePlugin'      : "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin.kotlin}",
                    'stdlib'            : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin.kotlin}",
                    'coroutines'        : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlin.kotlinCoroutines}",
                    'coroutinesAndroid' : "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlin.kotlinCoroutines}",
            ],
            'serialization': [
                    'plugin'   : "org.jetbrains.kotlin:kotlin-serialization:${versions.kotlin.kotlin}",
                    'json'     : "org.jetbrains.kotlinx:kotlinx-serialization-json:${versions.kotlin.ktxSerializationJson}",
                    'converter': "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:${versions.kotlin.retrofitKtxSerializationConverter}",
            ],
            'jblake2'      : "org.kocakosm:jblake2:${versions.jblake2}",
            'retrofit'     : "com.squareup.retrofit2:retrofit:${versions.retrofit}",
            'memfault'     : [
                    'cloud': "com.memfault.cloud:cloud-android:${versions.memfaultCloud}",
            ],
            'okhttp'       : "com.squareup.okhttp3:okhttp:${versions.okhttp}",
            'okio'         : "com.squareup.okio:okio:${versions.okio}",
            'result'       : "com.michael-bull.kotlin-result:kotlin-result:${versions.result}",
            'room'         : [
                    'compiler'           : "androidx.room:room-compiler:${versions.androidx.room}",
                    'runtime'            : "androidx.room:room-runtime:${versions.androidx.room}",
                    'ktx'                : "androidx.room:room-ktx:${versions.androidx.room}",
            ],
            'test'         : [
                    'coroutines'         : "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.test.coroutinesTest}",
                    'json'               : "org.json:json:${versions.test.json}",
                    'junitApi'           : "org.junit.jupiter:junit-jupiter-api:${versions.test.junit}",
                    'junitJupiterEngine' : "org.junit.jupiter:junit-jupiter-engine:${versions.test.junit}",
                    'junitVintageEngine' : "org.junit.vintage:junit-vintage-engine:${versions.test.junit}",
                    'mockk'              : "io.mockk:mockk:${versions.test.mockk}",
                    'mockWebServer'      : "com.squareup.okhttp3:mockwebserver:${versions.okhttp}",
                    'robolectric'        : "org.robolectric:robolectric:${versions.test.robolectric}",
                    'testCore'           : "androidx.test:core:${versions.test.androidxCoreTest}",
            ],
            'jackson'      : "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}",
            'zjsonpatch'   : "com.flipkart.zjsonpatch:zjsonpatch:${versions.zjsonpatch}",
    ]
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
    dependencies {
        classpath deps.android.gradlePlugin
        classpath deps.kotlin.gradlePlugin
        classpath deps.kotlin.ktlintGradle
        classpath deps.serialization.plugin
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

subprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    ktlint {
        version = "0.39.0"
        android = true
        outputColorName = "RED"
    }

    afterEvaluate {
        if (rootProject.properties["BORT_SKIP_LINT_VITAL"] == "1") {
            android {
                lintOptions {
                    checkReleaseBuilds false
                }
            }
        }
    }
}
